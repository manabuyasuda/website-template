@use "sass:math";

/*
---
name: l-Flex
namespace: l-
category: Layout
---

標準的なグリッドシステムです。カラムごとに任意の値を指定したい場合に使います。
カラム間の余白は横を`$flex-column-gap`、縦を`$flex-row-gap`で統一しています。

以下のような指定ができます。

- カラム数の指定（デフォルトは`-12/12`）。
  - `.l-Flex_Item.-8/12`
  - `.l-Flex_Item.-4/12`
- 均等なカラム数の指定（分母は`$flex-equal-column`で定義、100%から始める場合は`-1/1`は必須）
  - `.l-Flex_Item.-1/2`
  - `.l-Flex_Item.-1/2`
- カラムの反転（デフォルトは`.-row`）。
  - `.l-Flex.-reverse`
- カラムを戻す。
  - `.l-Flex.-row`
- カラムの順番を個別に指定（`order`の数値は`$flex-order`で定義）。
  - `.l-Flex.-order1`
  - `.l-Flex.-order2`
- カラムの水平方向の揃え（デフォルトは`.-left`）。
  - `.l-Flex.-left`
  - `.l-Flex.-center`
  - `.l-Flex.-right`
- カラムの垂直方向の揃え（デフォルトは`.-top`）。
  - `.l-Flex.-top`
  - `.l-Flex.-middle`
  - `.l-Flex.-bottom`
- ブレイクポイントの追加（上記の各指定で併用可能 `.l-Flex_Item.-8/12@md`など）。
  - `@sm`
  - `@md`
  - `@lg`
  - `@xl`

## `md`以降で2カラム

```jade
.l-Wrapper
  .l-Flex
    .l-Flex_Item(class="-8/12@md") -8/12@md
    .l-Flex_Item(class="-4/12@md") -4/12@md
```

## `md`以降で2カラムを反転

```jade
.l-Wrapper
  .l-Flex(class="-reverse@md")
    .l-Flex_Item(class="-8/12@md") -8/12@md
    .l-Flex_Item(class="-4/12@md") -4/12@md
```

## `md`以降で2カラムの表示順を個別に指定

```jade
.l-Wrapper
  .l-Flex
    .l-Flex_Item(class="-8/12@md -order2@md") -8/12@md -order2@md
    .l-Flex_Item(class="-4/12@md -order1@md") -4/12@md -order1@md
```

## `md`以降で1カラムの中央配置

```jade
.l-Wrapper
  .l-Flex(class="-center@md")
    .l-Flex_Item(class="-8/12@md") -8/12@md
```

## 1カラム、2カラム、3カラム

```jade
.l-Wrapper
  .l-Flex.-rowGap
    .l-Flex_Item(class="-1/1 -1/2@md -1/3@lg") -1/1 -1/2@md -1/3@lg
    .l-Flex_Item(class="-1/1 -1/2@md -1/3@lg") -1/1 -1/2@md -1/3@lg
    .l-Flex_Item(class="-1/1 -1/2@md -1/3@lg") -1/1 -1/2@md -1/3@lg
    .l-Flex_Item(class="-1/1 -1/2@md -1/3@lg") -1/1 -1/2@md -1/3@lg
    .l-Flex_Item(class="-1/1 -1/2@md -1/3@lg") -1/1 -1/2@md -1/3@lg
    .l-Flex_Item(class="-1/1 -1/2@md -1/3@lg") -1/1 -1/2@md -1/3@lg
```
*/
// カラムの左右の余白（ガター）を指定します。
// すべて指定してください。
$flex-column-gap: (
  "initial": $grid-column-gap,
  "sm": $grid-column-gap,
  "md": $grid-column-gap-md,
  "lg": $grid-column-gap-md,
  "xl": $grid-column-gap-md,
) !default;

// カラムの上下の余白を指定します。
// すべて指定してください。
$flex-row-gap: (
  "initial": $grid-row-gap,
  "sm": $grid-row-gap,
  "md": $grid-row-gap-md,
  "lg": $grid-row-gap-md,
  "xl": $grid-row-gap-md,
) !default;

// 均等なカラムを生成する分母を指定します。
// `1, 2`とすると`1/1`と`1/2`が生成されます。
$flex-equal-column: 1, 2, 3, 4, 5 !default;

//  カラムを`order`で個別に表示順を変更します。
// `1, 2`とすると`order: 1;`と`order: 2;`が生成されます。
$flex-order: 1, 2, 3 !default;

.l-Flex {
  -js-display: flex;
  display: flex;
  flex-wrap: wrap;
  margin-left: rem(map-get($flex-column-gap, initial) * -1);
  padding-left: 0;
  list-style-type: none;
}

@each $name, $breakpoint in $mq-breakpoints {
  @media (min-width: em($breakpoint)) {
    .l-Flex {
      margin-left: rem(map-get($flex-column-gap, $name) * -1);
    }
  }
}

.l-Flex.\-rowGap {
  margin-bottom: rem(map-get($flex-row-gap, initial) * -1) !important;
}

@each $name, $breakpoint in $mq-breakpoints {
  @media (min-width: em($breakpoint)) {
    .l-Flex.\-rowGap {
      margin-bottom: rem(map-get($flex-row-gap, $name) * -1) !important;
    }
  }
}

.l-Flex_Item {
  -js-display: flex;
  display: flex;
  flex-basis: 100%;
  max-width: 100%;
  padding-left: rem(map-get($flex-column-gap, initial));

  & > :first-child {
    margin-top: 0;
  }

  & > :last-child {
    margin-bottom: 0;
  }
}

@each $name, $breakpoint in $mq-breakpoints {
  @media (min-width: em($breakpoint)) {
    .l-Flex_Item {
      padding-left: rem(map-get($flex-column-gap, $name));
    }
  }
}

.l-Flex.\-rowGap > .l-Flex_Item {
  margin-bottom: rem(map-get($flex-row-gap, initial) * 1);
}

@each $name, $breakpoint in $mq-breakpoints {
  @media (min-width: em($breakpoint)) {
    .l-Flex.\-rowGap > .l-Flex_Item {
      margin-bottom: rem(map-get($flex-row-gap, $name) * 1);
    }
  }
}

@mixin column($key: null) {
  $columns: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 !default;
  $suffix: "";

  @if $key != null {
    $suffix: \@#{$key};
  }

  @each $column in $columns {
    .l-Flex_Item.\-#{$column}\/12#{$suffix} {
      flex-basis: percentage(math.div($column, 12));
      max-width: percentage(math.div($column, 12));
    }
  }
}

/**
 * 6/12と6/12のようなカラムを生成します。
 */
@include column();

@each $name, $breakpoint in $mq-breakpoints {
  @media (min-width: em($breakpoint)) {
    @include column($name);
  }
}

@mixin equal-column($key: null) {
  $columns: $flex-equal-column;
  $row-gap: map-get($flex-row-gap, initial);
  $suffix: "";

  @if $key != null {
    $row-gap: map-get($flex-row-gap, $key);
    $suffix: \@#{$key};
  }

  @each $column in $columns {
    $next-column: ($column + 1);

    .l-Flex_Item.\-1\/#{$column}#{$suffix} {
      flex-basis: percentage(math.div(1, $column));
      max-width: percentage(math.div(1, $column));
    }
  }
}

/**
 * 1/2と1/3のような均等なカラムを生成します。
 */
@include equal-column();

@each $name, $breakpoint in $mq-breakpoints {
  @media (min-width: em($breakpoint)) {
    @include equal-column($name);
  }
}

/**
 * 要素の垂直位置を上寄せにします。
 */
.l-Flex.\-top {
  align-items: flex-start;
}

@each $name, $breakpoint in $mq-breakpoints {
  @media (min-width: em($breakpoint)) {
    .l-Flex.\-top\@#{$name} {
      align-items: flex-start;
    }
  }
}

/**
 * 要素の垂直位置を真ん中寄せにします。
 */
.l-Flex.\-middle {
  align-items: center;
}

@each $name, $breakpoint in $mq-breakpoints {
  @media (min-width: em($breakpoint)) {
    .l-Flex.\-middle\@#{$name} {
      align-items: center;
    }
  }
}

/**
 * 要素の垂直位置を下寄せにします。
 */
.l-Flex.\-bottom {
  align-items: flex-end;
}

@each $name, $breakpoint in $mq-breakpoints {
  @media (min-width: em($breakpoint)) {
    .l-Flex.\-bottom\@#{$name} {
      align-items: flex-end;
    }
  }
}

/**
 * 要素を左寄せ、要素内は左寄せにします。
 */
.l-Flex.\-left {
  justify-content: flex-start;
}

@each $name, $breakpoint in $mq-breakpoints {
  @media (min-width: em($breakpoint)) {
    .l-Flex.\-left\@#{$name} {
      justify-content: flex-start;
    }
  }
}

/**
 * 要素を中央寄せ、要素内は左寄せにします。
 */
.l-Flex.\-center {
  justify-content: center;
}

@each $name, $breakpoint in $mq-breakpoints {
  @media (min-width: em($breakpoint)) {
    .l-Flex.\-center\@#{$name} {
      justify-content: center;
    }
  }
}

/**
 * 要素を右寄せ、要素内は左寄せにします。
 */
.l-Flex.\-right {
  justify-content: flex-end;
}

@each $name, $breakpoint in $mq-breakpoints {
  @media (min-width: em($breakpoint)) {
    .l-Flex.\-right\@#{$name} {
      justify-content: flex-end;
    }
  }
}

/**
 * `.l-Flex_Item`の表示順を逆にします。
 * A,B → B,A
 */
.l-Flex.\-reverse {
  flex-direction: row-reverse;
}

@each $name, $breakpoint in $mq-breakpoints {
  @media (min-width: em($breakpoint)) {
    .l-Flex.\-reverse\@#{$name} {
      flex-direction: row-reverse;
    }
  }
}

/**
 * `.l-Flex_Item`の表示順を戻します。
 * B,A → A,B
 */
.l-Flex.\-row {
  flex-direction: row;
}

@each $name, $breakpoint in $mq-breakpoints {
  @media (min-width: em($breakpoint)) {
    .l-Flex.\-row\@#{$name} {
      flex-direction: row;
    }
  }
}

@mixin order($key: null) {
  $orders: $flex-order;
  $suffix: "";

  @if $key != null {
    $suffix: \@#{$key};
  }

  @each $order in $orders {
    .l-Flex_Item.\-order#{$order}#{$suffix} {
      order: #{$order};
    }
  }
}

/**
 * `.l-Flex_Item`の表示順を個別に変更します。
 */
@include order();

@each $name, $breakpoint in $mq-breakpoints {
  @media (min-width: em($breakpoint)) {
    @include order($name);
  }
}
